@model JewelryManagementPlatform.Models.Client

@{
    ViewData["Title"] = "Ajouter un Client";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-user-plus me-2"></i>@ViewData["Title"]</h1>
    <a asp-action="Index" class="btn btn-outline-secondary">
        <i class="fas fa-arrow-left me-1"></i>Retour à la liste
    </a>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        <!-- FORMULAIRE SIMPLIFIÉ SANS VALIDATION AUTOMATIQUE -->
        <form method="post" action="/Clients/Create" id="clientForm">
            @Html.AntiForgeryToken()

            <!-- AFFICHAGE DES ERREURS -->
            @if (ViewData.ModelState.ErrorCount > 0)
            {
                <div class="alert alert-danger">
                    <h5>Erreurs de validation :</h5>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <div>@error.ErrorMessage</div>
                    }
                </div>
            }

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Nom *</label>
                    <input type="text" name="Nom" class="form-control" value="@Model.Nom" required />
                </div>

                <div class="col-md-6 mb-3">
                    <label class="form-label">Prénom *</label>
                    <input type="text" name="Prenom" class="form-control" value="@Model.Prenom" required />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Email</label>
                    <input type="email" name="Email" class="form-control" value="@Model.Email" />
                </div>

                <div class="col-md-6 mb-3">
                    <label class="form-label">Téléphone</label>
                    <input type="text" name="Telephone" class="form-control" value="@Model.Telephone" />
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Adresse</label>
                <textarea name="Adresse" class="form-control" rows="3">@Model.Adresse</textarea>
            </div>

            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save me-1"></i>Créer
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="fas fa-times me-1"></i>Annuler
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        console.log("Page Create Client chargée - Version simplifiée");

        // DÉSACTIVER COMPLÈTEMENT LA VALIDATION JQUERY
        if (typeof jQuery !== 'undefined' && jQuery.validator) {
            console.log("Désactivation de jQuery Validation");
            jQuery.validator.setDefaults({
                ignore: ":hidden", // Ignorer tous les champs
                rules: {},
                messages: {}
            });
        }

        // Gestion manuelle de la soumission
        document.getElementById('clientForm').addEventListener('submit', function(e) {
            console.log('=== FORMULAIRE SOUMIS ===');

            // Validation manuelle simple
            const nom = document.querySelector('input[name="Nom"]').value;
            const prenom = document.querySelector('input[name="Prenom"]').value;

            if (!nom || !prenom) {
                e.preventDefault();
                alert('Le nom et le prénom sont obligatoires');
                return false;
            }

            console.log('Données valides, soumission...');
            return true;
        });

        // Fonction de test manuel
        window.testCreateClient = function() {
            console.log('=== TEST MANUEL DE CRÉATION ===');

            const formData = new FormData();
            formData.append('Nom', 'TestNom');
            formData.append('Prenom', 'TestPrenom');
            formData.append('Email', 'test@email.com');
            formData.append('Telephone', '0123456789');
            formData.append('Adresse', 'Adresse test');
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            fetch('/Clients/Create', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                console.log('Status:', response.status);
                console.log('Redirected:', response.redirected);

                if (response.redirected) {
                    window.location.href = response.url;
                }
                return response.text();
            })
            .then(data => {
                console.log('Response received');
                if (data.includes("alert alert-danger")) {
                    console.log('Erreurs de validation détectées');
                    document.body.innerHTML = data;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Erreur: ' + error.message);
            });
        }
    </script>

    <!-- Bouton de test manuel -->
    <div class="mt-3 text-center">
        <button onclick="testCreateClient()" class="btn btn-warning">
            <i class="fas fa-bug me-2"></i>Tester la création manuellement
        </button>
    </div>
}